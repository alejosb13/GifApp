{"version":3,"sources":["components/AddCategory.js","components/GifItem.js","helpers/GetGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cat","type","onChange","target","value","GifItem","id","title","url","className","src","alt","getGift","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","status","estado","setEstado","useEffect","then","useFetchGifs","gif","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAACS,GAAD,OAAQP,GAAR,mBAAuBO,OACrCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,SAhBS,SAACN,GAClBF,EAAcE,EAAEO,OAAOC,QAgBfA,MAAQX,O,QCtBT,SAASY,EAAT,GAAiC,EAAfC,GAAgB,IAAbC,EAAY,EAAZA,MAAMC,EAAM,EAANA,IAGtC,OACI,sBAAKC,UAAU,6CAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,O,2BCRHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,0FAC4EO,UAAUF,GADtF,gDAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAIDC,EAAOD,EAAKE,KAAI,SAACC,GAAO,IAAD,EACzB,MAAO,CACHhB,GAAKgB,EAAIhB,GACTC,MAAQe,EAAIf,MACZC,IAAG,UAAGc,EAAIC,cAAP,aAAG,EAAYC,iBAAiBhB,QAXxB,kBAeZY,GAfY,4CAAH,sDCIPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SACrB,ECDwB,SAACA,GAEzB,MAA4BrB,mBAAS,CACjC2B,KAAK,GACLO,QAAO,IAFX,mBAAOC,EAAP,KAAeC,EAAf,KAeA,OAVAC,qBAAU,WACNjB,EAAQC,GACHiB,MAAK,SAAAR,GACFM,EAAU,CACNT,KAAK,YAAIG,GACTI,QAAO,SAGrB,CAACb,IAEIc,EDhBoBI,CAAalB,GAA5BO,EAAZ,EAAOD,KAAUO,EAAjB,EAAiBA,OAEjB,OACG,qCACK,oBAAIjB,UAAU,oCAAd,SAAmDI,IAClDa,GAAU,mBAAGjB,UAAU,mCAAb,yBAEX,qBAAKA,UAAU,YAAf,SACMW,EAAKC,KAAI,SAAAW,GAAG,OAAI,cAAC3B,EAAD,eAA0B2B,GAAZA,EAAI1B,aERrC,SAAS2B,IACpB,MAAoCzC,mBAAS,CAAC,gBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,8BAEQ2C,EAAWb,KAAI,SAAAR,GAAQ,OAEf,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,WCX1CsB,IAASC,OAAO,cAACH,EAAD,IAAkBI,SAASC,eAAe,W","file":"static/js/main.f76421f9.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setinputValue] = useState('')\r\n    \r\n    const handleChange = (e)=> {\r\n        setinputValue(e.target.value)\r\n    }\r\n    \r\n    const handleSubmit = (e)=> {\r\n        e.preventDefault()\r\n        if(inputValue.trim().length > 2){\r\n            setCategories((cat)=>[inputValue, ...cat]);\r\n            setinputValue('');\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                onChange={ handleChange } \r\n                value={ inputValue }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n  };","import React from 'react'\r\n\r\nexport default function GifItem({id,title,url}) {\r\n    \r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","export const getGift = async (category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=loxEViF3I7FLloLWtUY05Qoz00mGVlHT&q=${encodeURI(category)}&limit=25&offset=0&rating=g&lang=es`\r\n    const resp = await fetch(url)      \r\n    const {data} = await resp.json()\r\n    \r\n\r\n    \r\n    const gifs = data.map((img)=>{\r\n        return {\r\n            id : img.id,\r\n            title : img.title,\r\n            url : img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs\r\n}","import React from 'react'\r\nimport GifItem from './GifItem'\r\nimport {useFetchGifs} from '../hooks/useFetchGifs'\r\n\r\nexport const GifGrid = ({category}) => {\r\n    const {data:gifs,status} = useFetchGifs(category)\r\n\r\n    return (\r\n       <>\r\n            <h3 className=\"animate__animated animate__bounce\">{category}</h3>  \r\n            {status && <p className=\"animate__animated animate__flash\">Cargando...</p>}  \r\n            \r\n            <div className=\"grid-card\">\r\n                { gifs.map(gif => <GifItem key={gif.id} {...gif}  />) }\r\n            </div>\r\n       </>\r\n    )\r\n}\r\n","import { useState,useEffect } from 'react'\r\nimport {getGift} from '../helpers/GetGifs'\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    \r\n    const [estado, setEstado] = useState({\r\n        data:[],\r\n        status:true\r\n    })\r\n    \r\n    useEffect(()=>{\r\n        getGift(category)\r\n            .then(img =>{\r\n                setEstado({\r\n                    data:[...img],\r\n                    status:false\r\n                })\r\n            });\r\n    },[category])\r\n    \r\n    return estado\r\n}\r\n","import React,{useState} from 'react'\r\nimport {AddCategory} from './components/AddCategory'\r\nimport {GifGrid} from './components/GifGrid'\r\n\r\n\r\nexport default function GifExpertApp() {\r\n    const [categories, setCategories] = useState([\"OnePunchMan\"])\r\n    \r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n            <div>\r\n                {\r\n                    categories.map(category =>\r\n                        ( \r\n                            <GifGrid key={category} category={category} />\r\n                        ) \r\n                    )\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}